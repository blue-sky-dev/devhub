patch-package
--- a/node_modules/react-native-navigation/android/app/src/main/java/com/reactnativenavigation/controllers/NavigationActivity.java
+++ b/node_modules/react-native-navigation/android/app/src/main/java/com/reactnativenavigation/controllers/NavigationActivity.java
@@ -39,6 +39,7 @@ import com.reactnativenavigation.react.ReactGateway;
 import com.reactnativenavigation.screens.NavigationType;
 import com.reactnativenavigation.screens.Screen;
 import com.reactnativenavigation.utils.OrientationHelper;
+import com.reactnativenavigation.utils.ReflectionUtils;
 import com.reactnativenavigation.views.SideMenu.Side;
 
 import java.util.List;
@@ -455,6 +456,11 @@ public class NavigationActivity extends AppCompatActivity implements DefaultHard
             public void run() {
                 layout.destroy();
                 modalController.destroy();
+
+                Object devSupportManager = ReflectionUtils.getDeclaredField(getReactGateway().getReactInstanceManager(), "mDevSupportManager");
+                if (ReflectionUtils.getDeclaredField(devSupportManager, "mRedBoxDialog") != null) {
+                    ReflectionUtils.setField(devSupportManager, "mRedBoxDialog", null);
+                }
             }
         });
     }
--- a/node_modules/react-native-navigation/android/app/src/main/java/com/reactnativenavigation/react/JsDevReloadListenerReplacer.java
+++ b/node_modules/react-native-navigation/android/app/src/main/java/com/reactnativenavigation/react/JsDevReloadListenerReplacer.java
@@ -1,10 +1,12 @@
 package com.reactnativenavigation.react;
 
 import com.facebook.react.ReactInstanceManager;
-import com.facebook.react.bridge.JavaJSExecutor;
-import com.facebook.react.devsupport.ReactInstanceDevCommandsHandler;
 import com.reactnativenavigation.utils.ReflectionUtils;
 
+import java.lang.reflect.InvocationHandler;
+import java.lang.reflect.Method;
+import java.lang.reflect.Proxy;
+
 class JsDevReloadListenerReplacer {
     private final ReactInstanceManager reactInstanceManager;
     private final Listener listener;
@@ -19,49 +21,50 @@ class JsDevReloadListenerReplacer {
     }
 
     void replace() {
-        ReactInstanceDevCommandsHandler originalHandler = getOriginalHandler();
-        DevCommandsHandlerProxy proxy = new DevCommandsHandlerProxy(originalHandler, listener);
-        replaceInReactInstanceManager(proxy);
-        replaceInDevSupportManager(proxy);
-    }
+        Object originalHandler = getOriginalHandler();
 
-    private void replaceInDevSupportManager(DevCommandsHandlerProxy proxy) {
         Object devSupportManager = ReflectionUtils.getDeclaredField(reactInstanceManager, "mDevSupportManager");
-        ReflectionUtils.setField(devSupportManager, "mReactInstanceCommandsHandler", proxy);
-    }
 
-    private ReactInstanceDevCommandsHandler getOriginalHandler() {
-        return (ReactInstanceDevCommandsHandler) ReflectionUtils.getDeclaredField(reactInstanceManager, "mDevInterface");
+        Object proxy = Proxy.newProxyInstance(
+                originalHandler.getClass().getClassLoader(),
+                originalHandler.getClass().getInterfaces(),
+                new DevCommandsHandlerProxy(originalHandler, listener));
+
+        if (ReflectionUtils.getDeclaredField(reactInstanceManager, "mDevInterface") == null) {
+            ReflectionUtils.setField(devSupportManager, "mReactInstanceManagerHelper", proxy);
+        } else {
+            ReflectionUtils.setField(reactInstanceManager, "mDevInterface", proxy);
+            ReflectionUtils.setField(devSupportManager, "mReactInstanceCommandsHandler", proxy);
+        }
     }
 
-    private void replaceInReactInstanceManager(DevCommandsHandlerProxy proxy) {
-        ReflectionUtils.setField(reactInstanceManager, "mDevInterface", proxy);
+
+    private Object getOriginalHandler() {
+        Object devInterface = ReflectionUtils.getDeclaredField(reactInstanceManager, "mDevInterface");
+        if (devInterface == null) {
+            Object devSupportManager = ReflectionUtils.getDeclaredField(reactInstanceManager, "mDevSupportManager");
+            devInterface = ReflectionUtils.getDeclaredField(devSupportManager, "mReactInstanceManagerHelper");
+        }
+        return devInterface;
     }
 
-    private static class DevCommandsHandlerProxy implements ReactInstanceDevCommandsHandler {
-        private ReactInstanceDevCommandsHandler originalReactHandler;
+
+    private static class DevCommandsHandlerProxy implements InvocationHandler {
+        private Object originalReactHandler;
         private final Listener listener;
 
-        DevCommandsHandlerProxy(ReactInstanceDevCommandsHandler originalReactHandler, Listener listener) {
+        DevCommandsHandlerProxy(Object originalReactHandler, Listener listener) {
             this.originalReactHandler = originalReactHandler;
             this.listener = listener;
         }
 
         @Override
-        public void onReloadWithJSDebugger(JavaJSExecutor.Factory proxyExecutorFactory) {
-            listener.onJsDevReload();
-            originalReactHandler.onReloadWithJSDebugger(proxyExecutorFactory);
-        }
-
-        @Override
-        public void onJSBundleLoadedFromServer() {
-            listener.onJsDevReload();
-            originalReactHandler.onJSBundleLoadedFromServer();
-        }
-
-        @Override
-        public void toggleElementInspector() {
-            originalReactHandler.toggleElementInspector();
+        public Object invoke(Object proxy, Method method, Object[] args)
+                throws Throwable {
+            if (method.getName().equals("onJSBundleLoadedFromServer") || method.getName().equals("onReloadWithJSDebugger")) {
+                listener.onJsDevReload();
+            }
+            return method.invoke(originalReactHandler, args);
         }
     }
 }
