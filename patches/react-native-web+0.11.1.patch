diff --git a/node_modules/react-native-web/dist/exports/VirtualizedList/index.js b/node_modules/react-native-web/dist/exports/VirtualizedList/index.js
index e60fa0c..bf9cb04 100644
--- a/node_modules/react-native-web/dist/exports/VirtualizedList/index.js
+++ b/node_modules/react-native-web/dist/exports/VirtualizedList/index.js
@@ -6,5 +6,6 @@
  *
  * 
  */
+
 import VirtualizedList from '../../vendor/react-native/VirtualizedList';
 export default VirtualizedList;
\ No newline at end of file
diff --git a/node_modules/react-native-web/dist/vendor/react-native/VirtualizedList/index.js b/node_modules/react-native-web/dist/vendor/react-native/VirtualizedList/index.js
index c08437e..68d082b 100644
--- a/node_modules/react-native-web/dist/vendor/react-native/VirtualizedList/index.js
+++ b/node_modules/react-native-web/dist/vendor/react-native/VirtualizedList/index.js
@@ -1,3 +1,4 @@
+
 function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
 
 function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }
@@ -1380,6 +1381,15 @@ function (_React$Component) {
   // reused by SectionList and we can keep VirtualizedList simpler.
   ;
 
+  CellRenderer.getDerivedStateFromProps = function getDerivedStateFromProps(props, prevState) {
+    return {
+      separatorProps: {
+        ...prevState.separatorProps,
+        leadingItem: props.item,
+      },
+    };
+  };
+
   _proto2.updateSeparatorProps = function updateSeparatorProps(newProps) {
     this.setState(function (state) {
       return {
